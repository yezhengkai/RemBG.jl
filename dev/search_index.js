var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RemBG","category":"page"},{"location":"#RemBG","page":"Home","title":"RemBG","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RemBG.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RemBG]","category":"page"},{"location":"#RemBG.log_softmax-Tuple{Any}","page":"Home","title":"RemBG.log_softmax","text":"log_softmax(x)\nlog_softmax(x, dims)\n\nCompute the logarithm of the softmax function.\n\nIn principle::\n\nlog_softmax(x) = log(softmax(x))\n\nbut using a more accurate implementation.\n\nArguments\n\nx: Input array\ndims: Axis to compute values along\n\nReturns\n\nArray or Number: An array with the same shape as x. Exponential of the result will\n\nsum to 1 along the specified axis. If x is a scalar, a scalar is returned.\n\nExamples\n\njulia> x = [1000.0 1.0];\njulia> y = log_softmax(x)\n2-element Vector{Float64}:\n    0.0\n -999.0\n\njulia> x = [1000.0 1.0; 1000.0 1.0];\njulia> y = log_softmax(x, 2)\n2Ã—2 Matrix{Float64}:\n 0.0  -999.0\n 0.0  -999.0\n\n\n\n\n\n","category":"method"}]
}
